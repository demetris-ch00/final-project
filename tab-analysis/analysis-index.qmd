# Analysis

## Summary
The Facebook app is plagued by technical instability, invasive ads, and poor UI changes, leading to widespread frustration. While it remains a social hub, urgent fixes are needed to retain users.

## Data Exploration
```{r, echo=FALSE, warning=FALSE, message=FALSE}

# Load Required Packages
library(tidyverse)
library(tidytext)
library(kableExtra)
library(here) # for easy directory paths, defines your root directory 

# Load Dataset
df <- read_csv(here("fb_reviews.csv"))

# Tokenize and Clean Text

# Tokenization
df_tokens <- df %>%
  mutate(review_id = row_number()) %>%  # Create a simple ID for each review
  unnest_tokens(word, Comments)           # Break reviews into individual words

# Remove Stop Words
data("stop_words")  # Provided by tidytext
df_tokens_clean <- df_tokens %>%
  anti_join(stop_words, by = "word")

# Perform Sentiment Analysis Using AFINN

# The AFINN lexicon assigns an integer score to each word (range: -5 to 5).
afinn <- get_sentiments("afinn")

# Join tokenized reviews with AFINN to get word-level scores
df_afinn <- df_tokens_clean %>%
  inner_join(afinn, by = "word")

# Summarize the sentiment score for each review
review_scores <- df_afinn %>%
  group_by(review_id) %>%
  summarise(sentiment_score = sum(value), .groups = "drop")

# Merge scores back with the original reviews if you want
df_scored <- df %>%
  mutate(review_id = row_number()) %>%
  left_join(review_scores, by = "review_id") %>%
  # Replace NA scores with 0 for reviews that had no matched words
  mutate(sentiment_score = if_else(is.na(sentiment_score), 0, sentiment_score))

# Convert Numeric Scores to Positive, Neutral, Negative

# Define categories based on the numeric AFINN score:
df_scored <- df_scored %>%
  mutate(
    sentiment_category = case_when(
      sentiment_score > 0  ~ "Positive",
      sentiment_score < 0  ~ "Negative",
      TRUE                 ~ "Neutral"  # Covers sentiment_score == 0
    )
  )

# Save sentiment dataframe
df_scored %>% 
  write_csv("fb_reviews_sentiment_afinn.csv")

# View Data Using kableExtra
df_scored %>%
  select(review_id, Comments, sentiment_score, sentiment_category) %>%  # Show only relevant columns
  head(5) %>%
  kable() %>%
  kable_styling(full_width = FALSE, 
                bootstrap_options = c("striped", "hover"))

# Compute sentiment distribution
sentiment_counts <- df_scored %>% 
  count(sentiment_category, name = "Count") %>% 
  mutate(Percentage = round(Count / sum(Count) * 100, 1)) %>% 
  rename(Sentiment = sentiment_category)
```

## Sentiment Distribution
Here’s a sentiment analysis of the 160 Facebook app reviews, categorized into negative, neutral, and positive sentiments based on the language and tone of the comments:
```{r, echo=FALSE, warning=FALSE, message=FALSE}
# Load Required Packages
library(ggplot2)
library(RColorBrewer)
library(tidyverse)
library(tidytext)
library(kableExtra)
library(here) # for easy directory paths, defines your root directory 
# Display sentiment distribution table
sentiment_counts %>%
  kable(format = "html", align = "c") %>%
  kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover"))
# Plot Sentiment Distribution
palette_colors <- brewer.pal(8, "Set2")
ggplot(sentiment_counts, aes(x = Sentiment, y = Count, fill = Sentiment)) + 
  scale_fill_manual(values = c("Negative" = palette_colors[2], "Neutral" = palette_colors[3], "Positive" = palette_colors[1])) +
  geom_bar(stat = "identity") +
  labs(title = "Sentiment Distribution", x = "Sentiment", y = "Count") +
  theme_minimal()
```
## Key Observations
**1. Negative Sentiment (65%)**

* Primary Complaints:

  + Technical Bugs: Frequent crashes, login/logout failures, black screens, frozen UI.

  + Ads Overload: *"90% of my feed is ads or irrelevant suggestions."*

  + Algorithm Issues: Non-chronological feed, outdated posts, inability to see friends' content.

  + Privacy Concerns: Forced permissions, tracking, and invasive data practices.

  + Video/Photo Issues: Black screens, unresponsive media, broken subtitles.

  + Marketplace Glitches: Broken search filters, irrelevant recommendations.

* Notable Quotes:

  + *"This app is a buggy mess. I can't even log out!"*

  + *"Ads every 15 seconds ruin videos. It’s unwatchable."*

**2. Neutral Sentiment (15.6%)**

* Mixed Feedback:

  + Acknowledged functionality but criticized recent updates (e.g., *"Used to work well, but recent changes ruined it"*).

  + Frustration with specific features but no outright rejection (e.g., *"Notifications are delayed, but I still use it for groups"*).

**3. Positive Sentiment (19.4%)**
* Praise For:

  + Staying connected with friends/family.

  + Business tools (e.g., *"Useful for managing my small business page"*).

  + Occasional smooth functionality (e.g., *"Works fine for basic posting"*).

* Notable Quotes:

  + *"Great for sharing photos and keeping in touch."*

  + *"Essential for my online community."*

## Sentiment Trends
1. Dominant Negativity: 65% of reviews express frustration, primarily due to technical instability and invasive ads.

2. Rare Positivity: Positive reviews focus on core social features but are overshadowed by systemic issues.

3. Neutral as "Dissatisfied but Tolerant": Most neutral reviewers are long-time users tolerating flaws for specific needs (e.g., business pages).

## Recommendations
1. Prioritize Bug Fixes: Address crashes, login issues, and media-loading errors.

2. Reduce Ad Frequency: Allow users to customize ad density or offer a paid ad-free tier.

3. Improve Transparency: Clarify data practices and restore user control over feed algorithms.

4. Engage with Feedback: Publicly acknowledge issues and update users on fixes (e.g., *"We’re working on XYZ bugs"*).

This analysis highlights a crisis of user satisfaction, with urgent action needed to retain trust. The sheer volume of negative sentiment (65%) underscores systemic flaws in the app’s design and functionality.